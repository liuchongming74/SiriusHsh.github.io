<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>nEver Enough</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2016-09-30T05:41:50.410Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>SiriusHsh</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>谈谈《黑暗之魂1》给我带来的感动</title>
    <link href="http://yoursite.com/2016/09/29/%E8%B0%88%E8%B0%88%E9%BB%91%E6%9A%97%E4%B9%8B%E9%AD%821%E7%BB%99%E6%88%91%E5%B8%A6%E6%9D%A5%E7%9A%84%E6%84%9F%E5%8A%A8/"/>
    <id>http://yoursite.com/2016/09/29/谈谈黑暗之魂1给我带来的感动/</id>
    <published>2016-09-29T11:12:49.000Z</published>
    <updated>2016-09-30T05:41:50.410Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://octtw77pk.bkt.clouddn.com/b7fd5266d01609241e66b6a0dc0735fae7cd34cd.jpg" alt="黑暗之魂1"><br><a id="more"></a><br>《黑暗之魂1》这部作品是我在大三的时候接触的，闻名这是一款超抖M型的硬派RPG游戏，拥有过千小时MH游戏经历的我，自然非常想尝试一下。结果也是38小时<del>轻松</del>通关一周目。</p>
<p>那么，为什么我突然提到这个游戏并写了这篇文章呢，是因为今天在知乎上看到了这样一个问题“最让你震撼的游戏细节有哪些？”我扫了一眼答案，发现居然没有一人提到黑魂1！！这让我非常恼火，这么好的一部作品居然没有被提及！</p>
<p>我很喜欢它的叙事方式和故事内核，有的人玩过黑魂之后说这游戏没有剧情，全是打打杀杀，其实不然，它也拥有着譬如老滚一样庞大的世界观，对它所有的理解都是靠着NPC的只言片语、物品的故事介绍，将这些线索串接起来，你就会理解这竟是描述了一部如此悲壮的故事！要让我说，我觉得黑暗之魂1整部游戏充满着细节，忽视掉这些细节，你可能就成为了一个沉溺于杀戮、丧失人性的不死人，倘若你耐下心来研究，那么游戏中的每一处细节都可能让你感到震撼！</p>
<p>以下，我不打算说游戏中具体的某个小细节，因为这些细节实在太多太多。我就说下，将这些细节拼接起来后让我感到震撼的故事。</p>
<hr>
<blockquote>
<p>“Friend,I have an idea,a good one,really.”<br>“I will rush those dire things and you can slip away in the confusion!”<br>“Please friend,I owe you much more than this.”<br>“By the honour of the Knights of Catarina,allow me to assist you.”<br>“朋友，我有个主意，一个好主意…我会吸引这些怪物的注意力，你趁乱逃出去!拜托了，朋友，我欠你的太多太多。以卡特里纳骑士的荣誉之名，请允许我来帮助你!” ——洋葱骑士杰格迈尔<br><img src="http://octtw77pk.bkt.clouddn.com/b8f4cacec3fdfc036e6d8424d23f8794a4c22619.jpg" alt=""></p>
</blockquote>
<p>杰格迈尔是黑魂1里人气很高的角色，因为穿着的铠甲极其像一个洋葱，所以人称洋葱骑士，哈哈。他呆萌呆萌的，还老是犯傻遇到问题，让人忍不住想帮助他。<br>这里，有一个设定是当一个不死人失去所有希望时，他们就会开始活尸化，洋葱骑士是一个勇敢的探险者，热衷于冒险的激情使他与活尸化无缘，“Siegmeyer”这个名字代表着胜利，而胜利就是他的人生价值所在。<br>在游戏中，我们能遇到好多次洋葱骑士，每次遇到他，他似乎都遇到了困难，被古城拦在外头，被皇城的骑手吓得瑟瑟发抖等等。出于好意，我们一次又一次的帮助了他，但是殊不知我们的好意其实是在无形中慢慢剥夺他引以为傲的一切，让他觉得他得靠其他人渡过难关，我们的每一次帮助其实都在摧毁他的自信心，我们的每一次帮助都使他离活尸化越来越近。在废都那儿，他终于下定决心准备最后一搏，以牺牲自己来报答朋友，可是我们连他最后的尊严与胜利也剥夺了，如果我们选择让他牺牲自己来掩护我们逃跑，那么他将带着荣耀死去，然而，再一次拯救他，再一次侮辱了他的自尊…这也是我们最后一次见到活着的洋葱骑士了，在隐藏地图灰烬湖，我们找到了洋葱骑士，可是这时的他已被他的女儿忍痛杀害了，他女儿的使命就是寻找自己的父亲，然后在他活尸化后将他杀害，避免他滥杀无辜。我们的朋友，在灰烬图走到了人生的终点。</p>
<hr>
<blockquote>
<p>“Why?….Why?…..”<br>“After all these searching,I still cannot find it.”<br>“Was it all a lie?Have I done this all for nothing?”<br>“为什么？…为什么?….我经历了如此漫长的求索，为什么还是找不到。这一切都是谎言吗？我做的一切都毫无意义吗？”——太阳骑士索拉尔<br><img src="http://octtw77pk.bkt.clouddn.com/201505071709269013945.jpg" alt=""></p>
</blockquote>
<p>太阳骑士是我们的好基友，很多BOSS都可以抱他的大腿，登场的姿势成为了一种潮流(大误)。<br>正义的太阳骑士与主角有着不说清的关系，他们的命运似乎紧密的交错在一起，同是不死人，同样被囚禁在不死院，最后同样来到了太阳祭坛，搭上了同样的旅途…索拉尔的理想是在罗德兰寻找太阳，寻求光明，他不介意像个傻子一样，付诸一切来追寻梦想，然而这片大陆早已陷入黑暗，这旅途注定是挫折的。<br>随着游戏的推进，我们和他的羁绊也越来越强烈。在游戏中后期，当我们在恶魔遗迹发现他被太阳虫洗脑时，我们的内心一定是绝望的T^T。在多年的找寻无果后，他的希望终于变成了绝望，他输给了一种长得像太阳的虫子，并死在了我们的剑下。（有一个小细节，击杀太阳骑士后拿到他的盔甲，物品描述竟然是非常普通的盔甲，甚至衣服上太阳的标志都是自己画上去的，多么单纯善良的一个人。）<br>然而，我们怎么能让他就这么死去！在网上大牛的探索下，发现了避免太阳骑士被洗脑的方法，向白蜘蛛献出30个人性，开出捷径，杀光太阳虫，拯救太阳骑士！<br>在最终章初始的火炉，我们可以召唤太阳骑士与他并肩作战对抗葛温，击败葛温后，太阳骑士终于可以实现自己的梦想了T^T，将燃烧了自己的身体，让太阳重回大地，他心中的火，将会比世间万物都要闪耀！</p>
<hr>
<blockquote>
<p>“[coughs]All of you…..forgive me,for I have availed you nothing.”<br>“大家…..原谅我，我什么都没能做到。”——亚尔特留斯</p>
</blockquote>
<p>额，想偷懒了…就放些图吧，帅气的A大</p>
<p><img src="http://octtw77pk.bkt.clouddn.com/vXd2Ky8.jpg" alt="A大"><br>一直守护着自己逝去的战友的巨狼希夫</p>
<p><img src="http://octtw77pk.bkt.clouddn.com/QTbzHB4.jpg" alt="巨狼希夫"><br>当我们先打DLC再去找黑庭院森林找它，就会触发隐藏剧情。本应该立马攻击入侵者的希夫，却停下来凝视你，它记得你，知道你来的目的，但是他不能让你拿到能够漫步深渊的戒指，它为了保护你唯有继续战斗…希夫扬天长啸，叼起了亚尔特留斯的巨剑….(有个细节，与上一次不同，这里希夫叼的剑是朝左的，是故意拿出钝面来战斗)</p>
<p><img src="http://octtw77pk.bkt.clouddn.com/OcYvm3h.jpg" alt="死亡凝视"></p>
<p><img src="http://octtw77pk.bkt.clouddn.com/%E6%88%AA%E5%9B%BE02.png" alt=""></p>
<hr>
<p><em>如果你又倒下了，请再次站起来，这就是不死人的赞歌。重要的不是生或死，而是谁先倒下，是你的信念，还是阻挡你的障碍，每个人都要面对自己的命运。</em></p>
<hr>
<p>最后，例行惯例，<strong>赞美太阳</strong> \(^o^)/~</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://octtw77pk.bkt.clouddn.com/b7fd5266d01609241e66b6a0dc0735fae7cd34cd.jpg&quot; alt=&quot;黑暗之魂1&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="随笔" scheme="http://yoursite.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="随笔，游戏" scheme="http://yoursite.com/tags/%E9%9A%8F%E7%AC%94%EF%BC%8C%E6%B8%B8%E6%88%8F/"/>
    
  </entry>
  
  <entry>
    <title>OJ集中营</title>
    <link href="http://yoursite.com/2016/09/16/OJ%E9%9B%86%E4%B8%AD%E8%90%A5/"/>
    <id>http://yoursite.com/2016/09/16/OJ集中营/</id>
    <published>2016-09-16T01:55:16.000Z</published>
    <updated>2016-09-16T01:57:32.705Z</updated>
    
    <content type="html"><![CDATA[<p>leetcode解题集：<a href="https://github.com/SiriusHsh/leetcode" target="_blank" rel="external">https://github.com/SiriusHsh/leetcode</a><br>PAT解题集：<a href="https://github.com/SiriusHsh/PAT" target="_blank" rel="external">https://github.com/SiriusHsh/PAT</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;leetcode解题集：&lt;a href=&quot;https://github.com/SiriusHsh/leetcode&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/SiriusHsh/leetcode&lt;/a&gt;&lt;br&gt;P
    
    </summary>
    
      <category term="OJ" scheme="http://yoursite.com/categories/OJ/"/>
    
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="C++" scheme="http://yoursite.com/tags/C/"/>
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Windows通过cmd查看端口占用杀死进程的命令</title>
    <link href="http://yoursite.com/2016/09/07/Windows%E9%80%9A%E8%BF%87cmd%E6%9F%A5%E7%9C%8B%E7%AB%AF%E5%8F%A3%E5%8D%A0%E7%94%A8%E6%9D%80%E6%AD%BB%E8%BF%9B%E7%A8%8B%E7%9A%84%E5%91%BD%E4%BB%A4/"/>
    <id>http://yoursite.com/2016/09/07/Windows通过cmd查看端口占用杀死进程的命令/</id>
    <published>2016-09-07T07:53:17.000Z</published>
    <updated>2016-09-07T07:57:54.138Z</updated>
    
    <content type="html"><![CDATA[<p>最近运行<code>hexo s</code>的时候有时候会遇到4000端口被占用的情况，记录一下杀死占用4000端口进程的过程。</p>
<ol>
<li><code>netstat -ano</code>查看所有进程，<code>netstat -ano|findstr &quot;4000&quot;</code>查看4000端口的情况。</li>
<li>这时候能获取到进程的PID，打开任务管理器找到该进程杀死即可。(没有显示PID的情况：查看 -&gt; 选择列 -&gt; 勾选PID)</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近运行&lt;code&gt;hexo s&lt;/code&gt;的时候有时候会遇到4000端口被占用的情况，记录一下杀死占用4000端口进程的过程。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;netstat -ano&lt;/code&gt;查看所有进程，&lt;code&gt;netstat -ano|findstr
    
    </summary>
    
      <category term="问题解决" scheme="http://yoursite.com/categories/%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"/>
    
    
      <category term="Windows" scheme="http://yoursite.com/tags/Windows/"/>
    
      <category term="Hexo" scheme="http://yoursite.com/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>解决Powershell无法进入名字中带空格的路径</title>
    <link href="http://yoursite.com/2016/09/07/%E8%A7%A3%E5%86%B3Powershell%E6%97%A0%E6%B3%95%E8%BF%9B%E5%85%A5%E5%90%8D%E5%AD%97%E4%B8%AD%E5%B8%A6%E7%A9%BA%E6%A0%BC%E7%9A%84%E8%B7%AF%E5%BE%84/"/>
    <id>http://yoursite.com/2016/09/07/解决Powershell无法进入名字中带空格的路径/</id>
    <published>2016-09-07T00:55:59.000Z</published>
    <updated>2016-09-07T01:01:27.929Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://octtw77pk.bkt.clouddn.com/%E6%88%AA%E5%9B%BE05.png" alt="图片"><br>解决：使用命令<code>Push-Location -Path &quot;Sublime Text 3&quot;</code><img src="http://octtw77pk.bkt.clouddn.com/%E6%88%AA%E5%9B%BE03.png" alt="图片"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://octtw77pk.bkt.clouddn.com/%E6%88%AA%E5%9B%BE05.png&quot; alt=&quot;图片&quot;&gt;&lt;br&gt;解决：使用命令&lt;code&gt;Push-Location -Path &amp;quot;Sublime Text 3&amp;q
    
    </summary>
    
      <category term="问题解决" scheme="http://yoursite.com/categories/%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"/>
    
    
      <category term="Sublime Text 3" scheme="http://yoursite.com/tags/Sublime-Text-3/"/>
    
  </entry>
  
  <entry>
    <title>解决JNI相关问题(3)</title>
    <link href="http://yoursite.com/2016/09/04/%E8%A7%A3%E5%86%B3JNI%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98(3)/"/>
    <id>http://yoursite.com/2016/09/04/解决JNI相关问题(3)/</id>
    <published>2016-09-04T10:17:30.000Z</published>
    <updated>2016-09-04T10:25:00.110Z</updated>
    
    <content type="html"><![CDATA[<h3 id="解决问题：Can’t-find-dependent-libraries报错"><a href="#解决问题：Can’t-find-dependent-libraries报错" class="headerlink" title="解决问题：Can’t find dependent libraries报错"></a>解决问题：Can’t find dependent libraries报错</h3><a id="more"></a>
<p>今天将项目移植到另外一台电脑上，结果JNI又出错了，<del>真是一个柔弱的女子啊</del></p>
<p>解决思路：无法找到依赖的库,应该是.dll出的问题</p>
<p>解决方案：将编译方案由Debug改为Release，解决！</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;解决问题：Can’t-find-dependent-libraries报错&quot;&gt;&lt;a href=&quot;#解决问题：Can’t-find-dependent-libraries报错&quot; class=&quot;headerlink&quot; title=&quot;解决问题：Can’t find dependent libraries报错&quot;&gt;&lt;/a&gt;解决问题：Can’t find dependent libraries报错&lt;/h3&gt;
    
    </summary>
    
      <category term="问题解决" scheme="http://yoursite.com/categories/%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="JNI" scheme="http://yoursite.com/tags/JNI/"/>
    
  </entry>
  
  <entry>
    <title>解决JNI相关问题(2)</title>
    <link href="http://yoursite.com/2016/09/04/%E8%A7%A3%E5%86%B3JNI%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98(2)/"/>
    <id>http://yoursite.com/2016/09/04/解决JNI相关问题(2)/</id>
    <published>2016-09-04T09:20:40.000Z</published>
    <updated>2016-09-04T10:25:11.222Z</updated>
    
    <content type="html"><![CDATA[<h3 id="本篇主要讲述JNI中GetStringUTFChars-方法的用法。"><a href="#本篇主要讲述JNI中GetStringUTFChars-方法的用法。" class="headerlink" title="本篇主要讲述JNI中GetStringUTFChars()方法的用法。"></a>本篇主要讲述JNI中GetStringUTFChars()方法的用法。</h3><a id="more"></a>
<p>Java中有String类型，对应JNI中的JString，而C语言中没有这种类型，GetStringUTFChars()这个方法就是用来将JString转换成C语言中的char *类型的。</p>
<p>该函数有两种形式：</p>
<ol>
<li><strong>C中的形式</strong><br>C代码：<code>const char *str = (*env)-&gt;GetStringUTFChars(env,string,0)</code></li>
<li><strong>C++中的形式</strong><br>C++代码:<code>const char *str = env-&gt;GetStringUTFChars(string,0)</code></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;本篇主要讲述JNI中GetStringUTFChars-方法的用法。&quot;&gt;&lt;a href=&quot;#本篇主要讲述JNI中GetStringUTFChars-方法的用法。&quot; class=&quot;headerlink&quot; title=&quot;本篇主要讲述JNI中GetStringUTFChars()方法的用法。&quot;&gt;&lt;/a&gt;本篇主要讲述JNI中GetStringUTFChars()方法的用法。&lt;/h3&gt;
    
    </summary>
    
      <category term="问题解决" scheme="http://yoursite.com/categories/%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="JNI" scheme="http://yoursite.com/tags/JNI/"/>
    
  </entry>
  
  <entry>
    <title>解决JNI相关问题(1)</title>
    <link href="http://yoursite.com/2016/09/04/%E8%A7%A3%E5%86%B3JNI%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98(1)/"/>
    <id>http://yoursite.com/2016/09/04/解决JNI相关问题(1)/</id>
    <published>2016-09-04T02:54:31.000Z</published>
    <updated>2016-09-04T13:34:41.183Z</updated>
    
    <content type="html"><![CDATA[<h2 id="本篇主要讲述："><a href="#本篇主要讲述：" class="headerlink" title="本篇主要讲述："></a>本篇主要讲述：</h2><ul>
<li>生成.h文件的正确姿势</li>
<li>生成和使用.dll文件的正确姿势</li>
</ul>
<a id="more"></a>
<blockquote>
<p>最近着手的项目用到了JNI，照着文档边学边做，遇到了很多坑，我打算一一写出来，来帮助也遇到JNI相关问题的童鞋。<br><del>国内资料实在是太渣了，让我绕了好多弯路</del></p>
</blockquote>
<h3 id="如何生成-h文件"><a href="#如何生成-h文件" class="headerlink" title="如何生成.h文件"></a>如何生成.h文件</h3><p>首先编写好Java程序(有关JNI的Java程序写法不详述了)<img src="http://octtw77pk.bkt.clouddn.com/9/4JNI.png" alt="图片">在该文件所在的目录下按<code>shift+右键</code>,打开命令行，输入<code>javac your_file_name.java</code>编译成.class文件。</p>
<hr>
<p>上面都是小儿科，关键来了，退出到<strong>该Java文件的包的同一级</strong>，为什么意思呢，拿我这个Java文件来说，它有包名<code>com.jg.model.Image</code>所以应该退出到<img src="http://octtw77pk.bkt.clouddn.com/%E6%88%AA%E5%9B%BE06.png" alt="图片">这一级，能看到com包，打开命令行输入<code>javah your_file_name</code>来生成.h文件，格式为： javah 包名.文件名，这里有两点要提：1.包名一定要写全 2.文件名后没有后缀!参考我这个写法：<img src="http://octtw77pk.bkt.clouddn.com/%E6%88%AA%E5%9B%BE07.png" alt="图片">前面都操作正确，就能见到这个.h文件了<img src="http://octtw77pk.bkt.clouddn.com/%E6%88%AA%E5%9B%BE08.png" alt="图片"></p>
<hr>
<h3 id="如何生成和使用-dll文件"><a href="#如何生成和使用-dll文件" class="headerlink" title="如何生成和使用.dll文件"></a>如何生成和使用.dll文件</h3><p>之后就是打开C/C++的IDE来编写C/C++程序，这里我使用的是VS2013。<br>这里我也遇到了好多问题，我来写一下我的解决方案吧。<br>打开VS2013，文件–&gt;新建–&gt;项目–&gt;Win32控制台应用程序（<strong>项目名字要注意，是你在Java程序里写的要加载的库名,即System.loadLibrary(“”)里写的库名</strong>）–&gt;确定–&gt;下一步–&gt;<strong>应用程序类型</strong>选择DLL，点上空项目–&gt;完成–&gt;源程序里创建一个cpp开始编写，之后我不着重讲怎么写C程序)(因为很简单)，而是来讲下你们可能会出现的一些问题：</p>
<ul>
<li><strong>头文件引入问题</strong><br>如果头文件引入不当，会出现五花八门的错误，我来讲下我的做法：将上面编译出的.h文件放到和源程序（上一步创建用来编写程序的那个cpp）一起，之后还有两个.h文件，分别是jni.h，位于<code>%HOME%\Java\jdk1.8.0_71\include</code>, jni-md.h，位于<code>%HOME%\Java\jdk1.8.0_71\include\win32</code>，把这两也放到和源程序一起，<img src="http://octtw77pk.bkt.clouddn.com/%E6%88%AA%E5%9B%BE09.png" alt="图片">然后在VS里点头文件-&gt;添加现有项，将那三个头文件加进去，这时你会发现你自个儿的那个头文件报错了，没事，将<code>#include &lt;jni.h&gt;</code> 改成 <code>#include &quot;jni.h&quot;</code>，现在去看看，应该没有报错了~~</li>
<li><strong>dll应该放哪儿？</strong><br>好不容易生成了.dll，应该放哪儿了呢？它应该被放在两个地方，一个是项目的根目录，一个是eclipse的根目录(我用的是eclipse，intelliJ不清楚)。<del>可能需要把eclipse重启下</del></li>
<li><strong>用win32编译问题</strong><br>你以为这问题结束了？并没有！由于我们大多使用的是64位的jdk，而VS默认使用的win32的解决方案，所以我们好不容易生成的.dll是不起作用的，不过别怕，只要稍作修改就就能解决~~<br>打开VS的配置管理器，修改成如下图所示:<img src="http://octtw77pk.bkt.clouddn.com/%E6%88%AA%E5%9B%BE11.png" alt="图片"><img src="http://octtw77pk.bkt.clouddn.com/%E6%88%AA%E5%9B%BE12.png" alt="图片">重新生成一下解决方案，用新生成的dll替换之前的那两个dll（新生成的dll在<code>/项目根目录/x64/debug</code>中）<br>如果出现<code>error LNK1561: 必须定义入口点</code>,那么这样来：右键项目–&gt;属性–&gt;常规–&gt;配置类型–&gt;动态库(.dll) </li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>到这里你应该看到你的JNI跑起来了，尽情去玩耍她吧！！<br><img src="http://octtw77pk.bkt.clouddn.com/%E6%88%AA%E5%9B%BE10.png" alt="图片"></p>
<hr>
<p>最后附上我此前没讲的C++程序的写法<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"com_jg_model_Image_TestJNI.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="function">JNIEXPORT <span class="keyword">void</span> JNICALL <span class="title">Java_com_jg_model_Image_TestJNI_sayHello</span></span></div><div class="line"><span class="params">(JNIEnv *, jclass)</span></div><div class="line">&#123;</div><div class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">"Hello World!"</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;本篇主要讲述：&quot;&gt;&lt;a href=&quot;#本篇主要讲述：&quot; class=&quot;headerlink&quot; title=&quot;本篇主要讲述：&quot;&gt;&lt;/a&gt;本篇主要讲述：&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;生成.h文件的正确姿势&lt;/li&gt;
&lt;li&gt;生成和使用.dll文件的正确姿势&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="问题解决" scheme="http://yoursite.com/categories/%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"/>
    
    
      <category term="JNI" scheme="http://yoursite.com/tags/JNI/"/>
    
      <category term="JAVA" scheme="http://yoursite.com/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>Git学习笔记</title>
    <link href="http://yoursite.com/2016/08/30/Git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2016/08/30/Git学习笔记/</id>
    <published>2016-08-30T12:05:16.000Z</published>
    <updated>2016-09-16T01:09:18.810Z</updated>
    
    <content type="html"><![CDATA[<h1 id="创建版本库"><a href="#创建版本库" class="headerlink" title="创建版本库"></a>创建版本库</h1><p>1.初始化Git仓库，使用<code>git init</code>命令　　<br>2.添加文件到Git仓库，分两步：<br>　　第一步,使用命令<code>git add &lt;file&gt;</code>，注意，可反复多次使用，添加多个文件<br>　　第二步,使用命令<code>git commit</code>,完成<br>　　//两步合一步，<code>git commit -am &quot;&quot;</code>….. 仅适用于修改文件，如果有新文件添加，还是需要两步<br>3.要随时掌握工作区的状态，使用 <code>git status</code>命令<br><a id="more"></a></p>
<h1 id="本地仓库管理"><a href="#本地仓库管理" class="headerlink" title="本地仓库管理"></a>本地仓库管理</h1><p>1.如果 <code>git status</code>告诉你有文件被修改过，用<code>git diff</code>可以查看修改内容<br>2.HEAD指向的版本就是当前的版本，因此，Git允许我们在版本的历史之间穿梭，使用命令 <code>git reset --hard commit_id</code><br>        　　git reset –hard HEAD^<br>    　　git reset –hard HEAD^^…<br>    　　git reset –hard HEAD~100<br>3.穿梭前，使用 <code>git log</code>    (git log –pretty=oneline –abbrev-commmit)<br>4.要重返未来，用 <code>git reflog</code>查看命令历史，以便确定要回到未来的哪个版本<br>5.工作区(Working Directory)就是在电脑里能看到的目录<br>　　版本库(Repository) 工作区有一个隐藏目录 .git，这就是Git的版本库<br>　　版本库里存了很多东西，其中最重要的就是stage的暂存区，还有Git为我们自动创建的第一个分支master，以及指向master的一个指针HEAD<br>6.Git跟踪并管理的是修改，而非文件，每次修改，如果不add到暂存区，那就不会加入到commit中<br>7.撤销修改<br>   　　场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令<code>git checkout -- fileName</code><br>   　　场景2：当你不仅改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃，分两步<br>　　　　第一步，用命令<code>git reset HEAD fileName</code>，就回到了场景1<br>　　　　第二步，按场景1操作<br>　　场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退<br>8.对应的，删除文件<br>    　　场景1,仅删除了工作区里的文件,rm fileName,那么用命令 <code>git checkout -- fileName</code>来恢复 (实际就是stage  –&gt; Wording Directory)<br>    　　场景2，删除了文件又提交到了stage, <code>git rm fileName</code>, 那么也是分两步        　　<br>　　　　　第一步，用命令<code>git reset HEAD fileName</code>，回到场景1         　　<br>　　　　　第二步，按场景1操作<br>    　　场景3：已经提交了删除操作到版本库，想要撤销本次删除，参考版本回退</p>
<h1 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h1><p>1.github相关,git如何将github作为远程仓库呢<br>　　(1) of course,注册一个Github账号<br>　　(2) 创建SSH Key   中文测试<br>　　<code>ssh-keygen -t rsa -C &quot;youremail@example.com&quot;</code><br>　　地址：用户主目录, .ssh目录， id_rsa是私钥，id_rsa.pub是公钥<br>　　(3)登录Github，打开 “Account settings”,”SSH Keys”页面，点“Add SSH Key“，<br>　　填上title，在key文本中粘贴id_rssa.pub文件的内容<br>2.要关联一个远程库，使用命令 <code>git remote add origin git@github.com:userName/repo-name.git</code><br>        关联后，使用命令 <code>git push -u origin master</code> 第一次推送master分支的所有内容<br>        此后，每次本地提交后，可以使用 <code>git push origin master</code>推送最新修改<br>3.要克隆一个仓库，首先必须知道仓库的地址，然后使用 git clone命令克隆<br>　　Git支持多种协议，包括https，但是ssh支持的原生git协议速度最快<br>　　<code>git clone https://github.com/SiriusHsh/gitskills.git</code><br>　　<code>git clone git@github:SiriusHsh/gitskills.git</code></p>
<h1 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h1><p>1.分支操作：<br>　　查看分支：<code>git branch</code><br>　　创建分支：<code>git branch branchName</code><br>　　切换分支：<code>git checkout branchName</code>　<br>　　创建+切换分支: <code>git checkout -b branchName</code><br>　　合并某分支到当前分支：<code>git merge branchName</code><br>　　删除分支：<code>git branch -d branchName</code><br>2.当Git无法自动合并分支时，就必须首先解决冲突。解决冲突后，在提交，合并完后才能使用 <code>git log --graph --pretty=oneline --abbrev-commit</code>命令可以看到分支合并图<br>3.合并分支时，加上 –no-ff 参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并<br>而fast forward合并就看不出曾经做过合并.<br>      <code>git merge --no-ff -m &quot;XXX&quot;</code><br>4.BUG分支与保存现场<br>　　修复bug时，我们会通过创建新的bug分支进行修复，然后合并，最后删除<br>　　当手头工作没有完成时，先把工作现场 <code>git stash</code>一下，然后去修复bug，修复后，再<code>git stash pop</code>,回到现场<br><code>git stash list</code>，可以查看有哪些工作现场<br>　　修复现场有两种方法<br>　　　　一是用<code>git stash apply</code>修复，但是恢复后，stash内容并不删除，需用<code>git stash drop</code>来删除<br>　　　　二是用<code>git stash pop</code>，恢复的同时把stash的内容也删除了。<br>5.feature分支<br>　　开发一个新feature，最好新建一个分支<br>　　如果要丢弃一个没有被合并过的分支，可以通过<code>git checkout -D branchName</code><br>6.查看远程库信息,使用<code>git remote -v</code><br>7.多人协作的工作模式<br>　　(1)首先，可以试图用<code>git push origin branchName</code>推送自己的修改<br>　　(2)如果推送失败，则因为远程分支比你的本地更新，需要先用<code>git pull</code>试图合并<br>　　(3)如果合并有冲突，则解决冲突，并在本地提交<br>　　(4)没有冲突或者解决掉冲突后，再用 <code>git push origin branchName</code> 推送就能成功！<br>　　如果 <code>git pull</code> 提示“no tracking information“，则说明本地分支和远程分支的链接关系没有创建，<br>　　用命令 <code>git branch --set-upstream branchName origin/branchName</code></p>
<h1 id="标签管理"><a href="#标签管理" class="headerlink" title="标签管理"></a>标签管理</h1><p>1.创建标签<br>　　命令<code>git tag tagName</code>用于新建一个标签，默认为HEAD，也可以指定一个commit id<br>　　git tag -a tagName -m “XXXXX”  可以指定标签信息，-a 指定标签签名，-m指定说明文字<br>　　git tag -s tagName -m “XXXXX”  可以用PGP签名标签<br>　　命令git tag可以查看所有标签<br>2.操作标签<br>　　命令<code>git push origin tagName</code> 可以推送一个本地标签<br>　　命令<code>git push origin --tags</code>可以推送全部未推送过的本地标签<br>　　命令<code>git tag -d tagName</code> 可以删除一个本地标签　　<br>　　命令<code>git push origin :refs/tags/tagName</code> 可以删除一个远程标签</p>
<h1 id="自定义Git"><a href="#自定义Git" class="headerlink" title="自定义Git"></a>自定义Git</h1><p>1.忽略特殊文件<br>　　忽略某些文件时，需要编写.gitignore<br>　　.gitignore文件本身要放到版本库里，并且可以对.gitignore做版本管理<br>2.配置别名<br><code>git config --global alias.co checkout</code><br><code>git config --global alias.ci commit</code><br><code>git config --global alias.br branch</code></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;创建版本库&quot;&gt;&lt;a href=&quot;#创建版本库&quot; class=&quot;headerlink&quot; title=&quot;创建版本库&quot;&gt;&lt;/a&gt;创建版本库&lt;/h1&gt;&lt;p&gt;1.初始化Git仓库，使用&lt;code&gt;git init&lt;/code&gt;命令　　&lt;br&gt;2.添加文件到Git仓库，分两步：&lt;br&gt;　　第一步,使用命令&lt;code&gt;git add &amp;lt;file&amp;gt;&lt;/code&gt;，注意，可反复多次使用，添加多个文件&lt;br&gt;　　第二步,使用命令&lt;code&gt;git commit&lt;/code&gt;,完成&lt;br&gt;　　//两步合一步，&lt;code&gt;git commit -am &amp;quot;&amp;quot;&lt;/code&gt;….. 仅适用于修改文件，如果有新文件添加，还是需要两步&lt;br&gt;3.要随时掌握工作区的状态，使用 &lt;code&gt;git status&lt;/code&gt;命令&lt;br&gt;
    
    </summary>
    
      <category term="学习记录" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    
    
      <category term="学习笔记" scheme="http://yoursite.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Git" scheme="http://yoursite.com/tags/Git/"/>
    
      <category term="Github" scheme="http://yoursite.com/tags/Github/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2016/08/29/hello-world/"/>
    <id>http://yoursite.com/2016/08/29/hello-world/</id>
    <published>2016-08-28T16:00:00.000Z</published>
    <updated>2016-09-03T13:40:22.912Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><a id="more"></a>
<h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Quick-Start&quot;&gt;&lt;a href=&quot;#Quick-Start&quot; class=&quot;headerlink&quot; title=&quot;Quick Start&quot;&gt;&lt;/a&gt;Quick Start&lt;/h2&gt;
    
    </summary>
    
      <category term="博客搭建" scheme="http://yoursite.com/categories/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    
    
      <category term="博客" scheme="http://yoursite.com/tags/%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
</feed>
